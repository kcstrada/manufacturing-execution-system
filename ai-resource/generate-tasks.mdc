---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating a Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should guide a developer (or AI Operator) through implementation.

## Definition of terms
- AI Operator: A human software developer assisted by the AI in software development. AI Operator and software developer (or developer) can be used interchangeably in this context.
- Product Requirement Document (PRD): A specification document that defines what needs to be built, including features, requirements, and acceptance criteria.
- Work Stream: A set of related tasks assigned to an AI Operator that can be executed independently with minimal to no cross-dependencies.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-user-profile-editing.md`)

## Process

1.  **Receive PRD Reference:** The user points the AI to a specific PRD file
2.  **Analyze PRD:** The AI reads and analyzes the functional requirements, user stories, and other sections of the specified PRD.
3.  **Phase 1: Generate Parent Tasks:** Based on the PRD analysis, create the file and generate the main, high-level tasks required to implement the feature. Use your judgment on how many high-level tasks to create—typically around 5 works well. Keep in mind that multiple developers/AI Operators will collaborate to complete these tasks. Some tasks may serve as dependencies or common foundations that need to be completed before other AI Operators can work in parallel. Present these tasks to the user in the specified format (without sub-tasks yet). Then prompt the user: "I have generated the high-level tasks based on the PRD. To optimize the task breakdown for parallel work, please provide the names of the developers/AI Operators who will be working on this project (e.g., Alice, Bob, Charlie, Diana). When you're ready to generate the sub-tasks, respond with the developer names and a positive confirmation like 'Go'!"
4.  **Wait for Confirmation:** Pause and wait for the user to respond with the developer names and a positive confirmation like "Go".
5. **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Ensure sub-tasks logically follow from the parent task and cover the implementation details implied by the PRD. 

   **Task Organization Strategy:**
   
   **Group 1: Dependencies & Common Tasks**
   - Identify foundational sub-tasks that must be completed before parallel work can begin
   - Include shared components, APIs, database schemas, authentication systems, and core utilities
   - Mark these with clear completion criteria and output specifications
   - Sequence these tasks in dependency order (Task A → Task B → Task C)
   
   **Group 2: Parallel AI Operator Distribution**
   - Organize remaining sub-tasks into logical work streams that can be executed simultaneously
   - Ensure each AI Operator's assigned tasks have minimal interdependencies
   - Clearly define the boundaries between different operators' work areas
   - Specify shared resources, and integration points to prevent conflicts
   
   **For each sub-task, provide:**
   - Integration requirements with other operators' work
6.  **Identify Relevant Files:** Based on the tasks and PRD, identify potential files that will need to be created or modified. List these under the `Relevant Files` section, including corresponding test files if applicable.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/tasks/` directory with the filename `tasks-[prd-file-name].md`, where `[prd-file-name]` matches the base name of the input PRD file (e.g., if the input was `prd-user-profile-editing.md`, the output is `tasks-prd-user-profile-editing.md`).

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `path/to/potential/file1.ts` - Brief description of why this file is relevant (e.g., Contains the main component for this feature).
- `path/to/file1.test.ts` - Unit tests for `file1.ts`.
- `path/to/another/file.tsx` - Brief description (e.g., API route handler for data submission).
- `path/to/another/file.test.tsx` - Unit tests for `another/file.tsx`.
- `lib/utils/helpers.ts` - Brief description (e.g., Utility functions needed for calculations).
- `lib/utils/helpers.test.ts` - Unit tests for `helpers.ts`.

### Notes

- Unit tests should typically be placed alongside the code files they are testing (e.g., `MyComponent.tsx` and `MyComponent.test.tsx` in the same directory).
- Use `npx jest [optional/path/to/test/file]` to run tests. Running without a path executes all tests found by the Jest configuration.

## Tasks

- [ ] 1.0 Parent Task Title
  - **Common**
    - [ ] 1.1 [Sub-task description 1.1]
    - [ ] 1.2 [Sub-task description 1.2]
  - **[Developer Name 1]**
    - [ ] 1.3 [Sub-task description 1.3]
    - [ ] 1.4 [Sub-task description 1.4]
  - **[Developer Name 2]**
    - [ ] 1.5 [Sub-task description 1.5]
    - [ ] 1.6 [Sub-task description 1.6]
  - **[Developer Name X (depending on how many developers the user provides)]**
- [ ] 2.0 Parent Task Title
  - **Common**
    - [ ] 2.1 [Sub-task description 2.1]
  - **[Developer Name 1]**
    - [ ] 2.2 [Sub-task description 2.2]
    - [ ] 2.3 [Sub-task description 2.3]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)

## Dependency Mapping
- **Dependency Flow:** Simple diagram showing task prerequisites (e.g., "Tasks 1.1, 1.2 → Tasks 1.3-1.6")
- **Critical Path:** List of common tasks that must be completed before parallel work begins
- **Integration Points:** Specify when developers need to sync their work
- **Developer Specializations:** Show the general distribution and focus areas for each developer
```

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get developer names and user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will implement the feature.