version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mes-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-manufacturing_execution_system_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-manufacturing_execution_system_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mes-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: mes-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mes-network

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: mes-keycloak
    restart: unless-stopped
    command: start-dev
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: ${KEYCLOAK_PORT:-8080}
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-manufacturing_execution_system_db}
      KC_DB_USERNAME: ${DB_USER:-postgres}
      KC_DB_PASSWORD: ${DB_PASSWORD:-postgres}
      KC_FEATURES: token-exchange,admin-fine-grained-authz
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
      - "${KEYCLOAK_HTTPS_PORT:-8443}:8443"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: localhost:8080\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - mes-network

  # OpenFGA Authorization Engine
  openfga:
    image: openfga/openfga:v1.4.3
    container_name: mes-openfga
    restart: unless-stopped
    command: run
    environment:
      OPENFGA_DATASTORE_ENGINE: postgres
      OPENFGA_DATASTORE_URI: "postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-manufacturing_execution_system_db}?sslmode=disable"
      OPENFGA_DATASTORE_MAX_OPEN_CONNS: 10
      OPENFGA_DATASTORE_MAX_IDLE_CONNS: 2
      OPENFGA_PLAYGROUND_ENABLED: ${OPENFGA_PLAYGROUND_ENABLED:-true}
      OPENFGA_LOG_LEVEL: ${OPENFGA_LOG_LEVEL:-info}
      OPENFGA_LOG_FORMAT: json
      OPENFGA_AUTHN_METHOD: preshared
      OPENFGA_AUTHN_PRESHARED_KEYS: ${OPENFGA_PRESHARED_KEY:-secret}
      OPENFGA_HTTP_ADDR: 0.0.0.0:8081
      OPENFGA_GRPC_ADDR: 0.0.0.0:8083
      OPENFGA_METRICS_ENABLED: true
      OPENFGA_METRICS_ADDR: 0.0.0.0:3001
      OPENFGA_METRICS_ENABLE_RPC_HISTOGRAMS: true
    ports:
      - "${OPENFGA_HTTP_PORT:-8081}:8081"
      - "${OPENFGA_GRPC_PORT:-8083}:8083"
      - "${OPENFGA_METRICS_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - mes-network

  # pgAdmin for Database Management (Development Only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mes-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@mes.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - mes-network
    profiles:
      - dev

  # Redis Commander for Redis Management (Development Only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mes-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis_password}
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "${REDIS_COMMANDER_PORT:-8083}:8081"
    depends_on:
      - redis
    networks:
      - mes-network
    profiles:
      - dev

  # Backend Service (NestJS) - for local development
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: mes-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-3000}
      DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-manufacturing_execution_system_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM:-mes}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-mes-backend}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-secret}
      OPENFGA_API_URL: http://openfga:8081
      OPENFGA_STORE_ID: ${OPENFGA_STORE_ID}
      OPENFGA_API_TOKEN: ${OPENFGA_PRESHARED_KEY:-secret}
      JWT_SECRET: ${JWT_SECRET:-jwt_secret_key}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3001,http://localhost:3002}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
      - "${BACKEND_DEBUG_PORT:-9229}:9229" # Node.js debugging port
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      openfga:
        condition: service_healthy
    networks:
      - mes-network
    profiles:
      - app

  # Admin Portal (Next.js)
  admin-portal:
    build:
      context: ./frontend/admin-portal
      dockerfile: Dockerfile
      target: development
    container_name: mes-admin-portal
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      NEXT_PUBLIC_KEYCLOAK_URL: ${NEXT_PUBLIC_KEYCLOAK_URL:-http://localhost:8080}
      NEXT_PUBLIC_KEYCLOAK_REALM: ${KEYCLOAK_REALM:-mes}
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: ${KEYCLOAK_ADMIN_CLIENT_ID:-mes-admin-portal}
    ports:
      - "${ADMIN_PORTAL_PORT:-3001}:3000"
    volumes:
      - ./frontend/admin-portal:/app
      - ./frontend/packages:/packages
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - mes-network
    profiles:
      - app

  # User Portal (Next.js)
  user-portal:
    build:
      context: ./frontend/user-portal
      dockerfile: Dockerfile
      target: development
    container_name: mes-user-portal
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      NEXT_PUBLIC_KEYCLOAK_URL: ${NEXT_PUBLIC_KEYCLOAK_URL:-http://localhost:8080}
      NEXT_PUBLIC_KEYCLOAK_REALM: ${KEYCLOAK_REALM:-mes}
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: ${KEYCLOAK_USER_CLIENT_ID:-mes-user-portal}
    ports:
      - "${USER_PORTAL_PORT:-3002}:3000"
    volumes:
      - ./frontend/user-portal:/app
      - ./frontend/packages:/packages
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - mes-network
    profiles:
      - app

  # Nginx Reverse Proxy (Optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: mes-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - admin-portal
      - user-portal
    networks:
      - mes-network
    profiles:
      - nginx

networks:
  mes-network:
    driver: bridge
    name: mes-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  pgadmin-data:
    driver: local